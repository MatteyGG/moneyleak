import { Keyboard, InlineKeyboard } from "grammy";
import { MyContext } from "../types";
import { Categories, AmountButtons } from "../texts";

export const createCategoryKeyboard = (type: 'expense' | 'income') => {
  return new InlineKeyboard()
    .row(...Categories[type].map((c) => ({
      text: c,
      callback_data: `category_${c.replace(/ /g, '_')}`,
    })));
};

export async function startTransactionFlow(
  ctx: MyContext,
  type: "expense" | "income"
) {
  ctx.session.transactionFlow = { type };

  await ctx.reply(
    `–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ${type === "expense" ? "—Ä–∞—Å—Ö–æ–¥–∞" : "–¥–æ—Ö–æ–¥–∞"}:`,
    { reply_markup: createCategoryKeyboard(type) }
  );
}


export async function handleCategoryInput(ctx: MyContext) {
  if (!ctx.session.transactionFlow) return;

  const category = ctx.callbackQuery?.data;
  if (!category) return;

  ctx.session.transactionFlow.category = category
    .replace(/[^a-zA-Z–∞-—è–ê-–Ø ]/g, "")
    .trim();

  const amountKeyboard = new InlineKeyboard()
    .row(
      ...AmountButtons.preset.map((a) => ({
        text: `${a} ‚ÇΩ`,
        callback_data: `amount_${a}`,
      }))
    )
    .row({ text: AmountButtons.custom, callback_data: "custom_amount" });

  await ctx.editMessageText(
    `–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${category}\n–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É:`,
    { reply_markup: amountKeyboard }
  );
}

export async function handleAmountInput(ctx: MyContext) {
  if (!ctx.session.transactionFlow) return;

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Å–µ—Ç–Ω—ã—Ö —Å—É–º–º
  if (ctx.callbackQuery?.data?.startsWith("amount_")) {
    const amount = Number(ctx.callbackQuery.data.split("_")[1]);

    if (isNaN(amount)) {
      await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Å—É–º–º—ã");
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await saveTransaction(ctx, amount);

    // –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await ctx.editMessageReplyMarkup(undefined);
    await ctx.answerCallbackQuery();
    return;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Å—É–º–º—ã
  if (ctx.callbackQuery?.data === "custom_amount") {
    await ctx.editMessageText("üíµ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö:");
    ctx.session.transactionFlow.amount = undefined;
    await ctx.answerCallbackQuery();
    return;
  }
}

export async function saveTransaction(ctx: MyContext, amount?: number) {
  if (!ctx.session.transactionFlow) return;

  const finalAmount = amount || Number(ctx.message?.text);
  if (isNaN(finalAmount)) {
    await ctx.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    return;
  }

  try {
    await ctx.prisma.transaction.create({
      data: {
        amount: finalAmount,
        type: ctx.session.transactionFlow.type,
        category: ctx.session.transactionFlow.category || "–î—Ä—É–≥–æ–µ",
        familyId: ctx.session.familyId,
      },
    });

    await ctx.reply(
      `‚úÖ ${
        ctx.session.transactionFlow.type === "expense" ? "–†–∞—Å—Ö–æ–¥" : "–î–æ—Ö–æ–¥"
      } ` + `–Ω–∞ —Å—É–º–º—É ${finalAmount} ‚ÇΩ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!`,
      { reply_markup: new Keyboard().text("/report").resized() }
    );

    ctx.session.transactionFlow = undefined;
  } catch (error) {
    console.error("Transaction error:", error);
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
}

