import ExcelJS from "exceljs";
import { PrismaClient } from "@prisma/client";
import { InputFile } from "grammy";
import { bot } from "../bot";
import { MyContext } from "../types";

const prisma = new PrismaClient();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Excel-–æ—Ç—á–µ—Ç–∞
async function generateExcelReport(
  familyName: string,
  startDate: Date,
  endDate: Date
) {
  // 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î —á–µ—Ä–µ–∑ Prisma
  const transactions = await prisma.transaction.findMany({
    where: {
      familyId: familyName,
      createdAt: {
        gte: startDate,
        lte: endDate,
      },
    },
    orderBy: {
      createdAt: "desc",
    },
  });

  // 2. –°–æ–∑–¥–∞–µ–º Excel-–¥–æ–∫—É–º–µ–Ω—Ç
  const workbook = new ExcelJS.Workbook();
  const worksheet = workbook.addWorksheet("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏");

  // 3. –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
  worksheet.columns = [
    { header: "–î–∞—Ç–∞", key: "date", width: 15 },
    { header: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", key: "category", width: 20 },
    { header: "–¢–∏–ø", key: "type", width: 12 },
    {
      header: "–°—É–º–º–∞",
      key: "amount",
      width: 15,
      style: { numFmt: "#,##0.00" },
    },
    { header: "–û–ø–∏—Å–∞–Ω–∏–µ", key: "description", width: 30 },
  ];

  // 4. –°—Ç–∏–ª–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
  worksheet.getRow(1).eachCell((cell) => {
    cell.font = { bold: true, color: { argb: "FFFFFFFF" } };
    cell.fill = {
      type: "pattern",
      pattern: "solid",
      fgColor: { argb: "FF4F81BD" },
    };
  });

  // 5. –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
  transactions.forEach((transaction) => {
    worksheet.addRow({
      date: transaction.createdAt.toLocaleDateString("ru-RU"),
      category: transaction.category,
      type: transaction.type === "income" ? "–î–æ—Ö–æ–¥" : "–†–∞—Å—Ö–æ–¥",
      amount: transaction.amount,
      description: transaction.description || "",
    });
  });

  // 6. –î–æ–±–∞–≤–∏–º –∏—Ç–æ–≥–∏ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
  const incomeTotal = worksheet.addRow({
    date: "–ò–¢–û–ì–û –î–û–•–û–î–´:",
    amount: {
      formula: `SUMIFS(D2:D${worksheet.rowCount}, C2:C${worksheet.rowCount}, "–î–æ—Ö–æ–¥")`,
    },
  });
  incomeTotal.getCell("amount").numFmt = "#,##0.00";
  incomeTotal.font = { bold: true };

  const expenseTotal = worksheet.addRow({
    date: "–ò–¢–û–ì–û –†–ê–°–•–û–î–´:",
    amount: {
      formula: `SUMIFS(D2:D${worksheet.rowCount}, C2:C${worksheet.rowCount}, "–†–∞—Å—Ö–æ–¥")`,
    },
  });
  expenseTotal.getCell("amount").numFmt = "#,##0.00";
  expenseTotal.font = { bold: true };

  // 7. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
  const buffer = await workbook.xlsx.writeBuffer();
  return buffer;
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ (Grammy)
bot.command("excel_report", async (ctx: MyContext) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    const startDate = new Date(
      new Date().getFullYear(),
      new Date().getMonth(),
      1
    );
    const endDate = new Date(
      new Date().getFullYear(),
      new Date().getMonth() + 1,
      0
    );
    const excelBuffer = await generateExcelReport(
      ctx.session.familyName,
      startDate,
      endDate
    );

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await ctx.replyWithDocument(
      new InputFile(
        Buffer.from(excelBuffer),
        `report_${new Date().toISOString().slice(0, 10)}.xlsx`
      )
    );
  } catch (error) {
    await ctx.reply("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ üò¢");
    console.error(error);
  }
});

